1. DISPLAY FIRST NAME AND FIRST_NAME WITH LENGTH 6 OR MORE. DISPLAY FIRST TWO CHARACTERS IN SMALL CASE, LAST TWO CHARACTERS IN CAPITAL AND ALL REMAINING CHARACTERS IN CAMEL CASE.
SELECT FIRST_NAME , LOWER(SUBSTR(FIRST_NAME,1,2)) || INITCAP(SUBSTR(FIRST_NAME,3,LENGTH(FIRST_NAME)-4)) || UPPER(SUBSTR(FIRST_NAME,-2)) FROM EMPLOYEES WHERE FIRST_NAME LIKE '_____%_';

2. DISPLAY LAST_NAME AND ANOTHER LAST_NAME COLUMN WITH ALL VOWELS IN CAPITAL AND CONSONENTS IN SMALL CASE.
SELECT LAST_NAME , TRANSLATE(LOWER(LAST_NAME),'aeiou','AEIOU') FROM EMPLOYEES; 

3. DISPLAY FIRST_NAME AND ANOTHER COLUMN, IT SHOULD DISPLAY * FOR EACH CONSONENT AND + FOR EACH VOWELS.
SELECT FIRST_NAME , TRANSLATE(TRANSLATE(LOWER(FIRST_NAME),'aeiou','+++++'),'zxcvbnmlkjhgfdsqwrtyp','*********************') FROM EMPLOYEES;

4. DISPLAY EMAIL AND IDENTICAL RESULT OF EMAIL COLUMN USING FIRST_NAME AND LAST_NAME COLUMNS. (DON'T USE ||)
SELECT EMAIL , CONCAT(SUBSTR(FIRST_NAME,1,1) , TRANSLATE(UPPER(SUBSTR(LAST_NAME,1,7)),'# ','#')) FROM EMPLOYEES;

5. DISPLAY FIRST_NAME AND OTHER COLUMN WHICH WILL REMOVE ALL VOWELS FROM RIGHT AND ALL CONSONENTS FROM LEFT.
 SELECT FIRST_NAME , RTRIM(LTRIM(FIRST_NAME,'ZXCVBNMLKJHGFDSQWRTYP'),'aeiou') FROM EMPLOYEES;

6. DISPLAY FIRST_NAME AND OTHER COLUMN BY REMOVING ALL VOWELS.
SELECT FIRST_NAME , TRANSLATE(FIRST_NAME,'#AEIOUaeiou','# ') FROM EMPLOYEES;

7. DISPLAY LAST_NAME AND OTHER COLUMN. REPLACE i WITH ee, u WITH oo.
SELECT LAST_NAME , REPLACE(REPLACE(LAST_NAME,'i','ee'),'u','oo') FROM EMPLOYEES;

8. DISPLAY THOSE FIRST_NAME WHICH HAS ATLEAST 3 VOWELS.
SELECT FIRST_NAME FROM EMPLOYEES WHERE LENGTH(TRANSLATE(UPPER(FIRST_NAME),'#ZXCVBNMSDFGHJKLQWRTYP','# ')) >= 3;

9. DISPLAY ALL FIRST_NAME AND LAST_NAME IF ANY ONE OF IT HAS 2 OR MORE VOWELS.
SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES WHERE LENGTH(TRANSLATE(UPPER(FIRST_NAME),'#ZXCVBNMSDFGHJKLQWRTYP','# ')) >= 2 OR LENGTH(TRANSLATE(UPPER(LAST_NAME),'#ZXCVBNMSDFGHJKLQWRTYP','# ')) >= 2;

10. DISPLAY SALARY AND BONUS. BONUS IS 33.36% OF ANNUAL SALARY. DISPLAY BONUS BY TRUNCATING THE VALUE IN THOUSANDS AND ROUNDING THE VALUE IN HUNDREDS.
SELECT SALARY , SALARY*12 "ANNUAL SALARY" , ROUND(TRUNC(SALARY * 12 * 0.3336,-3),-2) BONUS FROM EMPLOYEES;

11. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY FIRST PAYMENT DATE.
SELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(HIRE_DATE) + 10,'WEDNESDAY')  FROM EMPLOYEES;

12. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY LAST PAYMENT DATE.
 SELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(ADD_MONTHS(SYSDATE,-1))+10,'WEDNESDAY') FROM EMPLOYEES;
 
DOUBT

13. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY NEXT PAYMENT DATE.
SELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(SYSDATE)+10,'WEDNESDAY') FROM EMPLOYEES;

14. COMPANY PAYS FORTNIGHTLY (EVERY 15 DAYS, ON 1ST OR ON 16TH.) DISPLAY FIRST PAYMENT DATE.
SELECT HIRE_DATE,NVL2(NULLIF(TRUNC(HIRE_DATE,'MONTH'),ROUND(HIRE_DATE,'MONTH')),LAST_DAY(TRUNC(HIRE_DATE,'MONTH'))+1,TRUNC(HIRE_DATE,'MONTH')+15) FROM EMPLOYEES;

15. DISPLAY FIRST_NAME , SALARY , BONUS , LAST 3 DIGITS OF BONUS. BONUS = ANNUAL SALARY * .4589.
SELECT FIRST_NAME , SALARY , TRUNC(SALARY*12*0.4589) BONUS FROM EMPLOYEES; 

16. DISPLAY FIRST_NAME , SALARY , NEW_TRUNC_SALARY , NEW_ROUND_SALARY AND EXTRA COLUMN, WHICH SHOULD DISPLAY EQUAL IF 3RD AND 4TH COLUUMNS HAVE SAME VALUES. (TRUNC AND ROUND SALARIES IN THOUSANDS)
SELECT FIRST_NAME, SALARY, TRUNC(SALARY,-4) NEW_TRUNC_SAL, ROUND(SALARY,-4) NEW_ROUND_SAL,
 NVL2(NULLIF(TRUNC(SALARY,-4), ROUND(SALARY,-4)),' ','EQUAL') FROM EMPLOYEES;

17. DISPLAY FIRST_NAME , SALARY , SALARY * 1.1437 (NEW SALARY) AND ONLY FRACTIONAL PART OF NEW SALARY. (DON'T USE TRUNC OR ROUND FUNCTION)
SELECT FIRST_NAME, SALARY, SALARY * 1.1437 NEW_SALARY, SALARY*1.1437 - (SALARY * 1.1437 - FLOOR(SALARY * 1.1437)) FRACTIONAL_PART FROM EMPLOYEES;

18. DISPLAY FIRST_NAME , SALARY , SALARY * 1.1437 (NEW SALARY) , TRUNC NEW SALARY IN HUNDREDS (USING TRUNC FUNCTION) , TRUNC NEW SALARY IN HUNDREDS (WITHOUT USING TRUNC FUNCTION).
SELECT FIRST_NAME, SALARY, SALARY * 1.1437 NEW_SALARY, TRUNC(SALARY * 1.1437, -2) TRUNC_NEW_SALARY_WITH_FUNCTION, SALARY * 1.1437 - MOD(SALARY * 1.1437, 100) TRUNC_NEW_SALARY_WITHOUT_FUNCTION FROM EMPLOYEES;

19. COMPANY PAYS ON EACH THURSDAY, DISPLAY FIRST_NAME , SYSDATE , HIRE_DATE , FIRST_SALARY_DATE WITH DAY NAME.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , NEXT_DAY(HIRE_DATE,'THURSDAY') FIRST_SALARY_DATE FROM EMPLOYEES;

20. COMPANY PAYS ON EACH WEDNESDAY, DISPLAY LAST_NAME , HIRE_DATE , SYSDATE , LAST_SALARY_DATE.
SELECT LAST_NAME , SYSDATE , HIRE_DATE , NEXT_DAY(SYSDATE,'THURSDAY') - 7 LAST_SALARY_DATE FROM EMPLOYEES;

21. COMPANY PAYS ON LAST DATE OF EACH MONTH. DISPLAY DATE OF LAST SALARY RECIEVED.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , LAST_DAY(ADD_MONTHS(SYSDATE,-1)) FROM EMPLOYEES;

22. COMPANY PAYS ON LAST DATE OF EACH MONTH, DISPLAY FIRST SALARY DATE.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , LAST_DAY(HIRE_DATE) FROM EMPLOYEES;

23. COMPANY PAYS ON 1ST DATE OF NEXT MONTH, DISPLAY FIRST SALARY DATE.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , LAST_DAY(HIRE_DATE) + 1 FROM EMPLOYEES;

24. COMPANY PAYS ON 1ST DATE OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , LAST_DAY(ADD_MONTHS(SYSDATE,-1))+1 FROM EMPLOYEES;

25. COMPANY PAYS ON FIRST THURSDAY OF NEXT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , NEXT_DAY(LAST_DAY(HIRE_DATE),'THURSDAY') FROM EMPLOYEES;

26. COMPANY PAYS ON FIRST MONDAY OF NEXT MONTH. DISPLAY DATE OF LAST SALARY RECD.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , NEXT_DAY(LAST_DAY(ADD_MONTHS(SYSDATE,-1)),'MONDAY')  FROM EMPLOYEES;;

27. COMPANY PAYS ON 7TH DATE OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
SELECT FIRST_NAME , HIRE_DATE , SYSDATE , LAST_DAY(ADD_MONTHS(SYSDATE,-1))+7 FROM EMPLOYEES;

28. COMPANY PAYS ON 7TH DATE OF NEXT MONTH, DISPLAY FIRST SALARY DATE WITH DAY NAME.
SELECT FIRST_NAME , HIRE_DATE , LAST_DAY(HIRE_DATE) + 7 FROM EMPLOYEES;

29. COMPANY PAYS ON SECOND WEDNESDAY OF NEXT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
SELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(HIRE_DATE),'WEDNESDAY') + 7 FROM EMPLOYEES;

30. COMPANY PAYS ON THIRD TUESDAY OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
SELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(ADD_MONTHS(SYSDATE,-2)),'TUESDAY') + 7*2 FROM EMPLOYEES;

31. COMPANY PAYS ON LAST SATURDAY OF CURRENT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
SELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(HIRE_DATE),'SATURDAY') - 7 FIRST_SALARY_DATE FROM EMPLOYEES;

32. COMPANY PAYS ON LAST FRIDAY OF CURRENT MONTH. DISPLAY DATE OF LAST SALARY RECD WITH DAY NAME.
SELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(ADD_MONTHS(SYSDATE,-1)),'FRIDAY') - 7 FIRST_SALARY_DATE FROM EMPLOYEES;

33. DISPLAY FIRST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/12) TOTAL_YEARS_COMPLETED FROM EMPLOYEES;

34. DISPLAY FIRST_NAME , HIRE_DATE , TOTAL MONTHS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)) TOTAL_MONTHS_COMPLETED FROM EMPLOYEES;

35. DISPLAY LAST_NAME , HIRE_DATE , TOTAL DAYS COMPLETED.
SELECT LAST_NAME , HIRE_DATE , TRUNC(SYSDATE-HIRE_DATE) TOTAL_DAYS_COMPLETED FROM EMPLOYEES;

36. DISPLAY LAST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED , EXTRA MONTHS COMPLETED.
SELECT LAST_NAME , HIRE_DATE , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/12) TOTAL_YEARS_COMPLETED , TRUNC(MONTHS_BETWEEN(SYSDATE,TRUNC(SYSDATE,'YEAR'))) EXTRA_MONTHS_COMPLETED FROM EMPLOYEES; 

37. DISPLAY LAST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED , EXTRA MONTHS COMPLETED , EXTRA DAYS COMPLETED.
SELECT LAST_NAME , HIRE_DATE , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/12) TOTAL_YEARS_COMPLETED , TRUNC(MONTHS_BETWEEN(SYSDATE,TRUNC(SYSDATE,'YEAR'))) EXTRA_MONTHS_COMPLETED , TRUNC(SYSDATE - TRUNC(SYSDATE,'YEAR')) EXTRA_DAYS_COMPLETED FROM EMPLOYEES; 

38. DISPLAY LAST_NAME , HIRE_DATE , TOTAL WEEKS COMPLETED , TOTAL QUARTERS COMPLETED.
SELECT LAST_NAME , HIRE_DATE , TRUNC((SYSDATE-HIRE_DATE)/7) TOTAL_WEEKS_COMPLETED , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/3) TOTAL_QUARTERS_COMPLETED FROM EMPLOYEES;

39. DISPLAY LAST_NAME , HIRE_DATE , TOTAL QUARTERS COMPLETED , EXTRA WEEKS COMPLETED.
SELECT LAST_NAME , HIRE_DATE , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/3) TOTAL_QUARTERS_COMPLETED , TRUNC(SYSDATE - TRUNC(SYSDATE,'YEAR'))/7 EXTRA_WEEKS COMPLETED FROM EMPLOYEES;

40. DISPLAY LAST_NAME , HIRE_DATE , TOTAL QUARTERS COMPLETED , EXTRA WEEKS COMPLETED , EXTRA DAYS COMPLETED.
SELECT LAST_NAME,HIRE_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/3) TQC, MOD(TRUNC(SYSDATE-HIRE_DATE),7) EWC ,TRUNC(SYSDATE-ADD_MONTHS(HIRE_DATE,TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)))) EDC
FROM EMPLOYEES;
	 
41. COMPANY MAKE EMPLOYEE PERMANENT AFTER 3 YEARS AND 3 QUARTERS OF JOINING DATE. DISPLAY FIRST_NAME , HIRE_DATE , PERMANENT_DATE.
SELECT FIRST_NAME , HIRE_DATE , ADD_MONTHS(ADD_MONTHS(HIRE_DATE,12*3),9) PERMANENT_DATE FROM EMPLOYEES;

42. COMPANY INCREMENTS ON 1ST APRIL AFTER COMPLETION OF 2 YEARS. DISPLAY LAST_NAME , FIRST_NAME , INCREMENT_DATE.
SELECT FIRST_NAME , HIRE_DATE , ADD_MONTHS(TRUNC(HIRE_DATE,'YEAR'),(12*2)+3) FROM EMPLOYEES;
  
DOUBT

43. COMPANY PAYS FIRST SALARY ON 1ST DATE AFTER COMPLETION OF FIRST MONTH. DISPLAY FIRST_NAME , HIRE_DATE AND FIRST_SALARY_DATE.
SELECT FIRST_NAME , HIRE_DATE , LAST_DAY(ADD_MONTHS(HIRE_DATE,1)) + 1 FROM EMPLOYEES;

44. IF HIRE DATE IS IN FIRST HALF OF MONTH, COMPANY PAYS ON NEXT MONTH'S FIRST DATE OTHER WISE NEXT TO NEXT MONTH'S FIRST DATE. DISPLAY LAST_NAME , HIRE_DATE AND FIRST_SALARY_DATE.
SELECT LAST_NAME , HIRE_DATE , CASE WHEN ROUND(HIRE_DATE,'MONTH')=TRUNC(HIRE_DATE,'MONTH') THEN ADD_MONTHS(TRUNC(HIRE_DATE,'MONTH'),1)
ELSE ADD_MONTHS(TRUNC(HIRE_DATE,'MONTH'),2) END COMP FROM EMPLOYEES;

45. DISPLAY FIRST_NAME , HIRE_DATE AND NO. OF DAYS WORKED IN FIRST MONTH.
SELECT FIRST_NAME , HIRE_DATE , LAST_DAY(HIRE_DATE) - HIRE_DATE FROM EMPLOYEES;

46. COMPANY PAYS ON EACH MONTH'S 7TH DATE. DISPLAY NEXT SALARY DATE.
SELECT FIRST_NAME , HIRE_DATE , TRUNC(ADD_MONTHS(SYSDATE,1),'MONTH') + 6 FROM EMPLOYEES;

47. DISPLAY FIRST_NAME , HIRE_DATE AND DAY NO. OF HIRE QUARTER.
SELECT FIRST_NAME , HIRE_DATE , HIRE_DATE - TRUNC(HIRE_DATE,'Q') + 1 FROM EMPLOYEES;

48. DISPLAY LAST_NAME , HIRE_DATE AND DAY NO. OF HIRE YEAR.
SELECT LAST_NAME , HIRE_DATE , HIRE_DATE - TRUNC(HIRE_DATE,'YEAR') + 1 DAYS_NUMBER FROM EMPLOYEES;

49. DISPLAY FIRST_NAME , HIRE_DATE , NO. OF DAYS WORKED IN HIRED QUARTER AND NO. OF DAYS WORKED IN HIRE YEAR.
SELECT FIRST_NAME , HIRE_DATE , ADD_MONTHS(TRUNC(HIRE_DATE,'Q'),3) - HIRE_DATE FROM EMPLOYEES;

50. COMPANY DECLARES 20% BONUS ON YEARLY SALARY. EMPLOYEE WILL GET BONUS IN PROPORTION OF NO. OF DAYS WORKED IN HIRE YEAR. DISPLAY FIRST_NAME , HIRE_DATE , NO. OF DAYS WORKED IN HIRE YEAR, SALARY AND BONUS.
SELECT FIRST_NAME , HIRE_DATE , HIRE_DATE - TRUNC(HIRE_DATE,'YY')+1 DAYS_WORKED , SALARY , TRUNC((HIRE_DATE - TRUNC(HIRE_DATE,'YY')+1) * (SALARY*12*0.2) / 365) BONUS FROM EMPLOYEES;
DOUBT
 
