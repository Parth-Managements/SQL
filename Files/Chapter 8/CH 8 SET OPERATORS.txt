1 DISPLAY FIRST_NAME AND DEPARTMENT_NAME IN SINGLE COLUMN. IT SHOULD NOT SORT ROWS.
SELECT FIRST_NAME FROM EMPLOYEES
UNION ALL
SELECT DEPARTMENT_NAME FROM DEPARTMENTS;

2 DISPLAY EMPLOYEE_ID AND DEPARTMENT_ID IN SINGLE COLUMN. IT SHOULD REMOVE DUPLICATES AND SORT ROWS.
SELECT EMPLOYEE_ID FROM EMPLOYEES
UNION
SELECT DEPARTMENT_ID FROM EMPLOYEES;

3 DISPLAY FIRST_NAME , HIRE_DATE UNDER DEPARTMENT_ID AND MANAGER_ID. IT SHOULD DISPLAY "FNM AND DID" AND "HD AND MID" AS COLUMN ALIAS.
SELECT TO_CHAR(FIRST_NAME) "FNM AND DID" , TO_CHAR(HIRE_DATE) "HD AND MID" FROM EMPLOYEES
UNION
SELECT TO_CHAR(DEPARTMENT_ID) , TO_CHAR(MANAGER_ID) FROM EMPLOYEES;  

4 DISPLAY FIRST 4 AND LAST 6 ROWS OF EMPLOYEES TABLE.
(SELECT * FROM EMPLOYEES FETCH NEXT 4 ROWS ONLY)
UNION 
(SELECT * FROM EMPLOYEES OFFSET 14 ROWS);

5 DISPLAY CITY AND DEPARTMENT_NAME IN SINGLE COLUMN WITH PROPER COLUMN HEADING. CITY MUST BE SORTED IN DESCENDING AND DEPARTMENT_NAME IN ASCENDING.
(SELECT CITY "CITY AND DEPT_NAME" FROM LOCATIONS ORDER BY CITY DESC OFFSET 0 ROWS )
UNION
(SELECT DEPARTMENT_NAME FROM DEPARTMENTS ORDER BY DEPARTMENT_NAME OFFSET 0 ROWS);

6 DISPLAY THOSE EXISTING EMPLOYEE_ID WHO HAVE GOT PROMOTION.
SELECT EMPLOYEE_ID FROM JOB_HISTORY
INTERSECT
SELECT EMPLOYEE_ID FROM EMPLOYEES;
  
7 DISPLAY THOSE EMPLOYEE_ID WHO HAVE LEFT THE COMPANY.
SELECT EMPLOYEE_ID FROM JOB_HISTORY
MINUS
SELECT EMPLOYEE_ID FROM EMPLOYEES;
  
8 DISPLAY ALL FIRST_NAME AND DEPARTMENT_NAME IN SINGLE RESULT SET WITH PROPER COLUMN HEADING.
SELECT FIRST_NAME "FNM AND DNM" FROM EMPLOYEES
UNION ALL
SELECT DEPARTMENT_NAME FROM DEPARTMENTS;
  
9 DISPLAY DEPARTMENT_ID IN WHICH NO EMPLOYEE IS HIRED.
SELECT DEPARTMENT_ID FROM DEPARTMENTS
MINUS 
SELECT DEPARTMENT_ID FROM EMPLOYEES;  
  
10 DISPLAY THOSE REGION_ID IN WHICH NO LOCATION EXISTS.
SELECT REGION_ID FROM REGIONS
MINUS
SELECT REGION_ID FROM COUNTRIES;
 
11 DISPLAY GRADE_LEVEL IN WHICH NO EMPLOYEE IS GETTING SALARY.
SELECT GRADE_LEVEL FROM JOB_GRADES
MINUS
SELECT GRADE_LEVEL FROM EMPLOYEES JOIN JOB_GRADES ON SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL;
    
12 DISPLAY COUNTRY_ID IN WHICH NO LOCATION EXISTS.
SELECT COUNTRY_ID FROM COUNTRIES
MINUS
SELECT COUNTRY_ID FROM LOCATIONS;
  
13 DISPLAY ONLY THOSE DEPARTMENT_NAME IN WHICH EMPLOYEES ARE WORKING.
SELECT DEPARTMENT_NAME FROM DEPARTMENTS
INTERSECT
SELECT DEPARTMENT_NAME FROM DEPARTMENTS JOIN EMPLOYEES USING (DEPARTMENT_ID);

14 DISPLAY THOSE EXISTING EMPLOYEE'S FIRST_NAME WHO HAVE NOT GOT ANY PROMOTION.
SELECT FIRST_NAME FROM EMPLOYEES
MINUS
SELECT FIRST_NAME FROM EMPLOYEES JOIN JOB_HISTORY USING (EMPLOYEE_ID); 

15 DISPLAY ONLY THOSE COUNTRY_NAME IN WHICH LOCATION EXISTS.
SELECT COUNTRY_NAME FROM COUNTRIES
INTERSECT
SELECT COUNTRY_NAME FROM LOCATIONS JOIN COUNTRIES USING (COUNTRY_ID);

16 DISPLAY ONLY THOSE REGION_NAME IN WHICH COUNTRY EXISTS.
SELECT REGION_NAME FROM REGIONS 
INTERSECT
SELECT REGION_NAME FROM REGIONS JOIN COUNTRIES USING (REGION_ID);

17 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED UNTIL YEAR 95, BUT NOT AFTER THAT.
SELECT JOB_ID FROM EMPLOYEES WHERE HIRE_DATE <= '31-DEC-95'
MINUS
SELECT JOB_ID FROM EMPLOYEES WHERE HIRE_DATE > '31-DEC-95';

18 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED UNTIL YEAR 95, AS WELL AS AFTER 95.
SELECT JOB_ID FROM EMPLOYEES WHERE HIRE_DATE <= '31-DEC-95'
UNION ALL
SELECT JOB_ID FROM EMPLOYEES WHERE HIRE_DATE > '31-DEC-95';

19 DISPLAY DEPARTMENT_ID FOR WHICH COMPANY HIRED EMPLOYEES IN FIRST HALF OF ANY YEAR AS WELL AS SECOND HALF OF ANY YEAR.
SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'MM') <= 6
UNION ALL
SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'MM') > 6;

20 DISPLAY DEPARTMENT_ID FOR WHICH COMPANY HIRED EMPLOYEES IN FIRST HALF OF ANY YEAR BUT NOT IN SECOND HALF OF ANY YEAR.
SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'MM') <= 6
MINUS
SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'MM') > 6;

21 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY UPTO 8000 AS WELL AS MORE THAN 8000.
SELECT JOB_ID FROM EMPLOYEES WHERE SALARY < 8000
UNION ALL
SELECT JOB_ID FROM EMPLOYEES WHERE SALARY > 8000;

22 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY UPTO 8000 BUT NOT MORE THAN 8000.
SELECT JOB_ID FROM EMPLOYEES WHERE SALARY < 8000
MINUS
SELECT JOB_ID FROM EMPLOYEES WHERE SALARY > 8000;

23 DISPLAY JOB_ID FOR WHICH EMPLOYEE GETS SALARY MORE THAN 10000 BUT NOT UPTO 10000.
SELECT JOB_ID FROM EMPLOYEES WHERE SALARY > 10000
MINUS
SELECT JOB_ID FROM EMPLOYEES WHERE SALARY <= 10000;

24 DISPLAY EMPLOYEE_ID , DEPARTMENT_ID , MANAGER_ID FOR THOSE EMPLOYEES WHO REPORT TO HIS DEPARTMENT HEAD.(DOUBT)
SELECT EMPLOYEE_ID , DEPARTMENT_ID , MANAGER_ID FROM EMPLOYEES 
INTERSECT
SELECT EMPLOYEE_ID , D.DEPARTMENT_ID , D.MANAGER_ID FROM EMPLOYEES E
JOIN DEPARTMENTS D ON D.MANAGER_ID = E.MANAGER_ID;

25 DISPLAY DEPARTMENT_ID , MANAGER_ID FOR THOSE EMPLOYEES WHO DOESN'T REPORT TO HIS DEPARTMENT HEAD.
SELECT EMPLOYEE_ID , D.DEPARTMENT_ID , D.MANAGER_ID FROM EMPLOYEES E
JOIN DEPARTMENTS D ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
MINUS
SELECT EMPLOYEE_ID , DEPARTMENT_ID , MANAGER_ID FROM EMPLOYEES;

26 DISPLAY THOSE JOB_ID FOR WHICH EMPLOYEES WERE HIRED IN ODD QUARTERS BUT NOT IN EVEN QUARTERS. (IGNORE YEAR)
SELECT JOB_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'Q') IN (1,3)
MINUS
SELECT JOB_ID FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'Q') IN (2,4);

==========================================================
FOR SOLVING BELOW QUESTIONS USE MPSEMP AND MPSDEPT TABLES.
==========================================================

27 DISPLAY ALL JOBS INCLUDING DUPLICATE FOR DEPTNO 20 AND 30.
SELECT JOB FROM MPSEMP WHERE DEPTNO = 20
UNION ALL
SELECT JOB FROM MPSEMP WHERE DEPTNO = 30;

28 DISPLAY ALL DISTINCT JOB FOR WHICH EMPLOYEES ARE HIRED IN BOTH DEPTNO 10 AND 30.
SELECT JOB FROM MPSEMP WHERE DEPTNO = 10
UNION 
SELECT JOB FROM MPSEMP WHERE DEPTNO = 30;

29 DISPLAY ALL DNAME AND LOC IN SINGLE COLUMN (ONE ABOVE THE OTHER) WITH PROPER COLUMN HEADING.
SELECT DNAME FROM MPSDEPT
UNION
SELECT LOC FROM MPSDEPT;

30 DISPLAY ONLY THOSE JOBS FOR WHICH EMPLOYEES ARE HIRED IN DEPTNO 30 BUT NOT FOR REMAINING DEPARTMENTS.
SELECT JOB FROM MPSEMP
INTERSECT
SELECT JOB FROM MPSEMP WHERE DEPTNO = 30;

31 DISPLAY ALL JOBS OF DEPTNO 10 AND 20 WHICH ARE NOT PRESENT IN DEPTNO 30.
SELECT JOB FROM MPSEMP
MINUS
SELECT JOB FROM MPSEMP WHERE DEPTNO = 30;

32 DISPLAY ONLY THOSE JOBS FOR WHICH COMPANY HAS HIRED EMPLOYEES ON BOTH YEARS 1981 AND 1982.
SELECT JOB FROM MPSEMP
INTERSECT
SELECT JOB FROM MPSEMP WHERE SUBSTR(HIREDATE,-2) IN (81,82);

33 (USE EMPLOYEES TABLE) DISPLAY THOSE JOBS FOR WHICH COMPANY HAS HIRED EMPLOYEES IN BOTH 1996 AND 1998 BUT NOT IN 1999.
SELECT JOB_ID FROM EMPLOYEES
INTERSECT
SELECT JOB_ID FROM EMPLOYEES WHERE SUBSTR(HIRE_DATE,-2) IN (96,98) AND SUBSTR(HIRE_DATE,-2) NOT IN (99);

34 DISPLAY STAFF, SUBJECT AND COLUMN NAMED CAN. WHICH SHOULD DISPLAY YES OR NO, BASED ON STAFF CAN TEACH THE SUBJECT OR NOT.
SELECT T.NAME STAFF , B.NAME SUBJECT , 'NO ' "CAN?" FROM MPSSTAFF T
CROSS JOIN MPSSUBJECT B
MINUS
SELECT STAFF , SUBJECT , 'NO ' FROM MPSCANTEACH
UNION
SELECT STAFF , SUBJECT , 'YES' FROM MPSCANTEACH;

35 DISPLAY JOB_ID AND SUM OF SALARY PAID TO EACH JOB AND DEPTNO AND NO. EMPLOYEES WORKS FOR EACH DEPTNO ONE ABOVE THE ANOTHER IN SINGLE RESULT SET. SORT RESULT ON LAST COLUMN.
SELECT JOB_ID , SUM(SALARY) FROM EMPLOYEES GROUP BY JOB_ID
UNION
SELECT TO_CHAR(DEPTNO) , COUNT(*) FROM MPSEMP GROUP BY DEPTNO ORDER BY 2;

36 DEVELOP ENAME AND EMPNO AS FIRST RESULT SET. DNAME AS SECOND RESULT SET AND CLUB BOTH VERTICALLY.
SELECT ENAME , EMPNO FROM MPSEMP
UNION
SELECT DNAME , NULL FROM MPSDEPT;

37 DEVELOP DEPTNO AND HIREDATE AS FIRST RESULT SET. ENAME AND DEPTNO AS SECOND RESULT SET. DISPLAY THEM AS SINGLE RESULT SET.
SELECT TO_CHAR(DEPTNO) , TO_CHAR(HIREDATE) FROM MPSEMP
UNION
SELECT ENAME , TO_CHAR(DEPTNO) FROM MPSEMP;

38 DISPLAY EMPLOYEE_ID , PROMOTED (YES/NO) (EMPLOYEES , JOB_HISTORY)
SELECT DISTINCT E.EMPLOYEE_ID , 'NO ' FROM EMPLOYEES E
FULL JOIN JOB_HISTORY JH ON E.JOB_ID = JH.JOB_ID
MINUS
(SELECT EMPLOYEE_ID , 'NO ' FROM EMPLOYEES
INTERSECT
SELECT EMPLOYEE_ID , 'NO ' FROM JOB_HISTORY)
UNION
(SELECT EMPLOYEE_ID , 'YES' FROM EMPLOYEES
INTERSECT
SELECT EMPLOYEE_ID , 'YES' FROM JOB_HISTORY) ORDER BY 1;

39 DISPLAY EMPLOYEE_ID , CURRENT (YES/NO) (EMPLOYEES , JOB_HISTORY)
SELECT DISTINCT E.EMPLOYEE_ID , 'YES' FROM EMPLOYEES E
UNION
SELECT DISTINCT J.EMPLOYEE_ID , 'YES' FROM JOB_HISTORY J
MINUS
(
SELECT EMPLOYEE_ID , 'YES' FROM JOB_HISTORY
MINUS
SELECT EMPLOYEE_ID , 'YES' FROM EMPLOYEES
)
UNION
(
SELECT EMPLOYEE_ID , 'NO' FROM JOB_HISTORY
MINUS
SELECT EMPLOYEE_ID , 'NO' FROM EMPLOYEES)ORDER BY 1;
